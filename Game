package game;

import building.Field;
import building.Figure;
import building.Figure1;
import building.Figure2;
import building.Figure3;
import building.Figure4;
import building.Figure5;
import building.Figure6;
import building.Figure7;
import files.FileWrite;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.imageio.ImageIO;

import windows.Menu;
import windows.QuestionWindow;
import windows.ScoreWindow;
import windows.TheEndWindow;
import windows.WinGameWindow;

import java.util.*;
import java.util.List;

@SuppressWarnings("serial")
public class Game extends JPanel {
	JFrame frame;
	Figure f;
	Field field;
	FileWrite file=new FileWrite();

	private keyEventListener keyListener;
	private timerActionListener timerListener;
	public static Timer timer;

	Menu M;
	ScoreWindow sw;
	TheEndWindow end;

	Image im = null;
	Graphics2D g2d;

	public static List<Figure> list;

	boolean pause;
	public static int score;
	public static int level;
	public static int[] Records;
	int LevelTime;
	static boolean the_end;
	
	public Game()throws IOException, FileNotFoundException{
		keyListener=new keyEventListener();
		timerListener=new timerActionListener();
		list=new ArrayList<Figure>();
		field=new Field();
		level=1;
		score=0;
		LevelTime=1000;
		timer=new Timer(LevelTime,timerListener);
		the_end=false;
		pause=false;
	}
	public void start() throws InterruptedException, IOException{
		ChooseFigure(list);
		ChooseFigure(list);
		frame = new JFrame("Tetris");
		frame.add(this);
		frame.setSize(500,700);
		frame.setVisible(true); 
		frame.addKeyListener(keyListener);
		Records = file.FileRead();
		sw=new ScoreWindow();
		M=new Menu("Menu");
		M.menu_checker=false;
		M.MenuButtons(file);
		timer.start();
		frame.addWindowListener(
	            new WindowAdapter(){
	                public void windowClosing(WindowEvent e){
	                	timer.stop();
	                	//the_end=true;
	        			StringBuilder sb = new StringBuilder();
	        			for(int i=0;i<Records.length;i++){
	        				sb.append(Records[i]);
	        				sb.append("\n");
	        			}
	        			try {
							file.FileW(score, sb.toString());
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
	        			System.exit(0);
	            }
	        ); 
		try {
	            im = ImageIO.read(new File("fon1.jpg"));
	    } catch (IOException e) {}
	}
	
	public void ScoreChecker(){
		if(score>=2000 && score<5000){
			LevelTime=700;
			timer.setDelay(LevelTime);
			level=2;
			 try {
		            im = ImageIO.read(new File("fon2.jpg"));
		        } catch (IOException e) {}
		}
		if(score>=5000 && score<10000){
			LevelTime=500;
			timer.setDelay(LevelTime);
			level=3;
			 try {
		            im = ImageIO.read(new File("fon3.jpg"));
		        } catch (IOException e) {}
		}
		if(score>=10000 && score<20000){
			LevelTime=300;
			timer.setDelay(LevelTime);
			level=4;
			 try {
		            im = ImageIO.read(new File("fon4.jpg"));
		        } catch (IOException e) {}
		}
		if(score>=20000 && score<50000){
			LevelTime=200;
			timer.setDelay(LevelTime);
			level=5;
			 try {
		            im = ImageIO.read(new File("fon5.jpg"));
		        } catch (IOException e) {}
		}
		if(score>=50000&&score<100000){
			LevelTime=100;
			timer.setDelay(LevelTime);
			level=6;
			 try {
		            im = ImageIO.read(new File("fon6.jpg"));
		        } catch (IOException e) {}
		}
		if(score>=100000){
			score=100000;
			 try {
		            im = ImageIO.read(new File("fon7.jpg"));
		        } catch (IOException e) {}
		}
			
	}
	
	public void TheEndChecker(Figure f) throws InterruptedException, IOException{
		if(f.get0CubeY()<60){
			the_end=true;
			StringBuilder sb = new StringBuilder();
			for(int i=0;i<Records.length;i++){
				sb.append(Records[i]);
				sb.append("\n");
			}
			file.FileW(score, sb.toString());
			end = new TheEndWindow(frame,score);
		}
	}
	
	public static boolean TheEnd(){
		return the_end;
	}
	
	public void ChooseFigure(List<Figure> list2){
		int a=(int)(1+Math.random()*7);
		switch(a){
		case 1:
			f=new Figure1();
			list2.add(0,f);
			break;
		case 2:
			f=new Figure2();
			list2.add(0,f);
			break;
		case 3:
			f=new Figure3();
			list2.add(0,f);
			break;
		case 4:
			f=new Figure4();
			list2.add(0,f);
			break;
		case 5:
			f=new Figure5();
			list2.add(0,f);
			break;
		case 6:
			f=new Figure6();
			list2.add(0,f);
			break;
		case 7:
			f=new Figure7();
			list2.add(0,f);
			break;
		}
	}
	
	public void paint(Graphics g){
		super.paint(g);
		if(M.menu_checker){
			super.paint(g);
			Graphics2D g2d = (Graphics2D) g;
	        g2d.drawImage(im, 0, 0, null); 
			if(!pause){
				for(int i=1;i<list.size();i++){
					list.get(i).FigureBuild(g2d);
				}
			}
			else {
				g2d.setColor(Color.RED);
				g2d.drawString("PAUSE", 210, 350);
			}
		}
	}
	private class timerActionListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			if(!pause){
				if(M.menu_checker){field.FigMove(list.get(1));}
				if(list.get(1).getStop()==true){
					score+=100;
					ScoreChecker();
					if(score==100000){
						try {
							@SuppressWarnings("unused")
							WinGameWindow wgw  = new WinGameWindow(frame, score);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
					try {
						TheEndChecker(list.get(1));
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					int a=field.CheckOnDeleting();
					while(a!=-1){
						score+=200;
						for(int i=1;i<list.size();i++){
							for(int j=0;j<4;j++){
								if(list.get(i).getCube()[j].getY()==(a-1)*30){
									list.get(i).getCube()[j].setY(list.get(i).getCube()[j].getY()+1000);
									list.get(i).setStop(true);
								}
								if(list.get(i).getCube()[j].getY()<(a-1)*30){
									list.get(i).getCube()[j].setY(list.get(i).getCube()[j].getY()+30);
									list.get(i).setStop(true);
								}
							}
						}
						a = field.CheckOnDeleting();
					}
					ChooseFigure(list);
				}
				Game.this.getParent().repaint();
				sw.repaint();
			}
		}
	}
	private class keyEventListener implements KeyListener{
		public void keyTyped(KeyEvent k){}
		public void keyReleased(KeyEvent k){}
		public void keyPressed(KeyEvent k){
			if(k.getKeyCode()==37) MoveFigLeft();
			if(k.getKeyCode()==39) MoveFigRight();
			if(k.getKeyCode()==38) RotateFig();
			if(k.getKeyCode()==40) MoveFigDown();
			if(k.getKeyCode()==10) pause=!pause;
			Game.this.getParent().repaint();
		}
	}
	public void MoveFigLeft(){
		field.ControlFigMoveLeft(list.get(1));
	};
	public void MoveFigRight(){
		field.ControlFigMoveRight(list.get(1));
	};
	public void MoveFigDown(){
		field.ControlFigMoveDown(list.get(1));
	};
	public void RotateFig(){
		list.get(1).setRot(list.get(1).getRot()+1);
		field.ControlFigRotate(list.get(1), g2d);
	};
}
